export default [
  {
    "statements": [
      "CREATE TABLE \"items\" (\n  \"value\" TEXT NOT NULL,\n  CONSTRAINT \"items_pkey\" PRIMARY KEY (\"value\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'items', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_items_primarykey;",
      "CREATE TRIGGER update_ensure_main_items_primarykey\n  BEFORE UPDATE ON \"main\".\"items\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"value\" != new.\"value\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column value as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_items_into_oplog;",
      "CREATE TRIGGER insert_main_items_into_oplog\n   AFTER INSERT ON \"main\".\"items\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'items', 'INSERT', json_patch('{}', json_object('value', new.\"value\")), json_object('value', new.\"value\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_items_into_oplog;",
      "CREATE TRIGGER update_main_items_into_oplog\n   AFTER UPDATE ON \"main\".\"items\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'items', 'UPDATE', json_patch('{}', json_object('value', new.\"value\")), json_object('value', new.\"value\"), json_object('value', old.\"value\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_items_into_oplog;",
      "CREATE TRIGGER delete_main_items_into_oplog\n   AFTER DELETE ON \"main\".\"items\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'items', 'DELETE', json_patch('{}', json_object('value', old.\"value\")), NULL, json_object('value', old.\"value\"), NULL);\nEND;"
    ],
    "version": "1"
  },
  {
    "statements": [
      "CREATE TABLE \"singly_linked_nodes\" (\n  \"uuid\" TEXT NOT NULL,\n  \"next_node\" TEXT,\n  CONSTRAINT \"singly_linked_nodes_next_node_fkey\" FOREIGN KEY (\"next_node\") REFERENCES \"singly_linked_nodes\" (\"uuid\"),\n  CONSTRAINT \"singly_linked_nodes_pkey\" PRIMARY KEY (\"uuid\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"doubly_linked_nodes\" (\n  \"uuid\" TEXT NOT NULL,\n  \"next_node\" TEXT,\n  \"prev_node\" TEXT,\n  CONSTRAINT \"doubly_linked_nodes_next_node_fkey\" FOREIGN KEY (\"next_node\") REFERENCES \"doubly_linked_nodes\" (\"uuid\"),\n  CONSTRAINT \"doubly_linked_nodes_prev_node_fkey\" FOREIGN KEY (\"prev_node\") REFERENCES \"doubly_linked_nodes\" (\"uuid\"),\n  CONSTRAINT \"doubly_linked_nodes_pkey\" PRIMARY KEY (\"uuid\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'singly_linked_nodes', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_singly_linked_nodes_primarykey;",
      "CREATE TRIGGER update_ensure_main_singly_linked_nodes_primarykey\n  BEFORE UPDATE ON \"main\".\"singly_linked_nodes\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"uuid\" != new.\"uuid\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column uuid as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_singly_linked_nodes_into_oplog;",
      "CREATE TRIGGER insert_main_singly_linked_nodes_into_oplog\n   AFTER INSERT ON \"main\".\"singly_linked_nodes\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'singly_linked_nodes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'singly_linked_nodes', 'INSERT', json_patch('{}', json_object('uuid', new.\"uuid\")), json_object('next_node', new.\"next_node\", 'uuid', new.\"uuid\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_singly_linked_nodes_into_oplog;",
      "CREATE TRIGGER update_main_singly_linked_nodes_into_oplog\n   AFTER UPDATE ON \"main\".\"singly_linked_nodes\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'singly_linked_nodes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'singly_linked_nodes', 'UPDATE', json_patch('{}', json_object('uuid', new.\"uuid\")), json_object('next_node', new.\"next_node\", 'uuid', new.\"uuid\"), json_object('next_node', old.\"next_node\", 'uuid', old.\"uuid\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_singly_linked_nodes_into_oplog;",
      "CREATE TRIGGER delete_main_singly_linked_nodes_into_oplog\n   AFTER DELETE ON \"main\".\"singly_linked_nodes\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'singly_linked_nodes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'singly_linked_nodes', 'DELETE', json_patch('{}', json_object('uuid', old.\"uuid\")), NULL, json_object('next_node', old.\"next_node\", 'uuid', old.\"uuid\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_singly_linked_nodes_next_node_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_singly_linked_nodes_next_node_into_oplog\n  AFTER INSERT ON \"main\".\"singly_linked_nodes\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'singly_linked_nodes') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'singly_linked_nodes', 'COMPENSATION', json_patch('{}', json_object('uuid', \"uuid\")), json_object('uuid', \"uuid\"), NULL, NULL\n  FROM \"main\".\"singly_linked_nodes\" WHERE \"uuid\" = new.\"next_node\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_singly_linked_nodes_next_node_into_oplog;",
      "CREATE TRIGGER compensation_update_main_singly_linked_nodes_next_node_into_oplog\n  AFTER UPDATE ON \"main\".\"singly_linked_nodes\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'singly_linked_nodes') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'singly_linked_nodes', 'COMPENSATION', json_patch('{}', json_object('uuid', \"uuid\")), json_object('uuid', \"uuid\"), NULL, NULL\n  FROM \"main\".\"singly_linked_nodes\" WHERE \"uuid\" = new.\"next_node\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'doubly_linked_nodes', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_doubly_linked_nodes_primarykey;",
      "CREATE TRIGGER update_ensure_main_doubly_linked_nodes_primarykey\n  BEFORE UPDATE ON \"main\".\"doubly_linked_nodes\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"uuid\" != new.\"uuid\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column uuid as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_doubly_linked_nodes_into_oplog;",
      "CREATE TRIGGER insert_main_doubly_linked_nodes_into_oplog\n   AFTER INSERT ON \"main\".\"doubly_linked_nodes\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'doubly_linked_nodes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'doubly_linked_nodes', 'INSERT', json_patch('{}', json_object('uuid', new.\"uuid\")), json_object('next_node', new.\"next_node\", 'prev_node', new.\"prev_node\", 'uuid', new.\"uuid\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_doubly_linked_nodes_into_oplog;",
      "CREATE TRIGGER update_main_doubly_linked_nodes_into_oplog\n   AFTER UPDATE ON \"main\".\"doubly_linked_nodes\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'doubly_linked_nodes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'doubly_linked_nodes', 'UPDATE', json_patch('{}', json_object('uuid', new.\"uuid\")), json_object('next_node', new.\"next_node\", 'prev_node', new.\"prev_node\", 'uuid', new.\"uuid\"), json_object('next_node', old.\"next_node\", 'prev_node', old.\"prev_node\", 'uuid', old.\"uuid\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_doubly_linked_nodes_into_oplog;",
      "CREATE TRIGGER delete_main_doubly_linked_nodes_into_oplog\n   AFTER DELETE ON \"main\".\"doubly_linked_nodes\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'doubly_linked_nodes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'doubly_linked_nodes', 'DELETE', json_patch('{}', json_object('uuid', old.\"uuid\")), NULL, json_object('next_node', old.\"next_node\", 'prev_node', old.\"prev_node\", 'uuid', old.\"uuid\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_doubly_linked_nodes_next_node_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_doubly_linked_nodes_next_node_into_oplog\n  AFTER INSERT ON \"main\".\"doubly_linked_nodes\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'doubly_linked_nodes') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'doubly_linked_nodes', 'COMPENSATION', json_patch('{}', json_object('uuid', \"uuid\")), json_object('uuid', \"uuid\"), NULL, NULL\n  FROM \"main\".\"doubly_linked_nodes\" WHERE \"uuid\" = new.\"next_node\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_doubly_linked_nodes_next_node_into_oplog;",
      "CREATE TRIGGER compensation_update_main_doubly_linked_nodes_next_node_into_oplog\n  AFTER UPDATE ON \"main\".\"doubly_linked_nodes\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'doubly_linked_nodes') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'doubly_linked_nodes', 'COMPENSATION', json_patch('{}', json_object('uuid', \"uuid\")), json_object('uuid', \"uuid\"), NULL, NULL\n  FROM \"main\".\"doubly_linked_nodes\" WHERE \"uuid\" = new.\"next_node\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_doubly_linked_nodes_prev_node_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_doubly_linked_nodes_prev_node_into_oplog\n  AFTER INSERT ON \"main\".\"doubly_linked_nodes\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'doubly_linked_nodes') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'doubly_linked_nodes', 'COMPENSATION', json_patch('{}', json_object('uuid', \"uuid\")), json_object('uuid', \"uuid\"), NULL, NULL\n  FROM \"main\".\"doubly_linked_nodes\" WHERE \"uuid\" = new.\"prev_node\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_doubly_linked_nodes_prev_node_into_oplog;",
      "CREATE TRIGGER compensation_update_main_doubly_linked_nodes_prev_node_into_oplog\n  AFTER UPDATE ON \"main\".\"doubly_linked_nodes\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'doubly_linked_nodes') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'doubly_linked_nodes', 'COMPENSATION', json_patch('{}', json_object('uuid', \"uuid\")), json_object('uuid', \"uuid\"), NULL, NULL\n  FROM \"main\".\"doubly_linked_nodes\" WHERE \"uuid\" = new.\"prev_node\";\nEND;"
    ],
    "version": "2"
  }
]